#include <iostream>
#include <climits>
using namespace std;

const int Max_size = 6;
int BT[Max_size];

int LeftNode(int key, int pos) {
    if (BT[pos] == INT_MIN) {
        cout << "We can't add to position " << pos << " because it is empty." << endl;
    } else {
        int temp = 2 * pos + 1;
        if (temp > Max_size - 1) {
            cout << "Left child position " << temp << " is out of bounds." << endl;
        } else {
            BT[temp] = key;
            cout << "Inserted " << key << " at left of position " << pos << endl;
        }
    }
    return 0;
}

int RightNode(int key, int pos) {
    if (BT[pos] == INT_MIN) {
        cout << "We can't add to position " << pos << " because it is empty." << endl;
    } else {
        int temp = 2 * pos + 2;
        if (temp > Max_size - 1) {
            cout << "Right child position " << temp << " is out of bounds." << endl;
        } else {
            BT[temp] = key;
            cout << "Inserted " << key << " at right of position " << pos << endl;
        }
    }
    return 0;
}

void printTree() {
    cout << "Binary Tree: ";
    for (int i = 0; i < Max_size; i++) {
        if (BT[i] != INT_MIN)
            cout << BT[i] << " ";
        else
            cout << "- ";
    }
    cout << endl;
}

int main() {
    cout << "Binary Tree using Array......" << endl << endl;

    for (int i = 0; i < Max_size; i++) {
        BT[i] = INT_MIN;
    }

    BT[0] = 10;
    cout << "Root set to 10 at position 0." << endl;

    LeftNode(1, 0);
    RightNode(2, 0);
    LeftNode(3, 1);
    RightNode(4, 1);

    printTree();

    return 0;
}
